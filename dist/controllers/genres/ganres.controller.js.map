{"version":3,"sources":["../../../src/controllers/genres/ganres.controller.ts"],"sourcesContent":["import GenresService from '@/services/genres/genres.service';\nimport { Request, Response } from 'express';\n\nexport default class GenresController {\n  static async createGenres(req: Request, res: Response) {\n    try {\n      const { name } = req.body;\n      const genres = await GenresService.createGenres(name);\n      res.status(201).json(genres);\n    } catch (err) {\n      if (err.message === 'Genres already exists') {\n        res.status(409).json({ message: err.message });\n      } else {\n        res.status(500).json({ message: 'Something went wrong' });\n      }\n    }\n  }\n  static async getAllGenres(req: Request, res: Response) {\n    const genres = await GenresService.getAllGenres();\n    res.status(200).json(genres);\n  }\n  static async getGenresById(req: Request, res: Response) {\n    const { id } = req.params;\n    const genres = await GenresService.getGenresById(id);\n    if (genres) {\n      res.status(200).json(genres);\n    } else {\n      res.status(404).json({ message: 'Genres not found' });\n    }\n  }\n  static async updateGenres(req: Request, res: Response) {\n    try {\n      const { id } = req.params;\n      const { name } = req.body;\n      const genres = await GenresService.updateGenres(id, name);\n      res.status(200).json(genres);\n    } catch (err) {\n      if (err.message === 'Genres already exists') {\n        res.status(409).json({ message: err.message });\n      } else {\n        res.status(500).json({ message: 'Something went wrong' });\n      }\n    }\n  }\n  static async deleteGenres(req: Request, res: Response) {\n    const { id } = req.params;\n    const isDeleted = await GenresService.deleteGenres(id);\n    if (isDeleted) {\n      res.status(200).json({ message: 'Genres deleted' });\n    } else {\n      res.status(404).json({ message: 'Genres not found' });\n    }\n  }\n}\n"],"names":["GenresController","createGenres","req","res","name","body","genres","GenresService","status","json","err","message","getAllGenres","getGenresById","id","params","updateGenres","deleteGenres","isDeleted"],"mappings":";;;;;;;eAGqBA;;;wDAHK;;;;;;AAGX,IAAA,AAAMA,mBAAN,MAAMA;IACnB,aAAaC,aAAaC,GAAY,EAAEC,GAAa,EAAE;QACrD,IAAI;YACF,MAAM,EAAEC,KAAI,EAAE,GAAGF,IAAIG,IAAI;YACzB,MAAMC,SAAS,MAAMC,sBAAa,CAACN,YAAY,CAACG;YAChDD,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACH;QACvB,EAAE,OAAOI,KAAK;YACZ,IAAIA,IAAIC,OAAO,KAAK,yBAAyB;gBAC3CR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAASD,IAAIC,OAAO;gBAAC;YAC9C,OAAO;gBACLR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAAS;gBAAuB;YACzD,CAAC;QACH;IACF;IACA,aAAaC,aAAaV,GAAY,EAAEC,GAAa,EAAE;QACrD,MAAMG,SAAS,MAAMC,sBAAa,CAACK,YAAY;QAC/CT,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACH;IACvB;IACA,aAAaO,cAAcX,GAAY,EAAEC,GAAa,EAAE;QACtD,MAAM,EAAEW,GAAE,EAAE,GAAGZ,IAAIa,MAAM;QACzB,MAAMT,SAAS,MAAMC,sBAAa,CAACM,aAAa,CAACC;QACjD,IAAIR,QAAQ;YACVH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACH;QACvB,OAAO;YACLH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEE,SAAS;YAAmB;QACrD,CAAC;IACH;IACA,aAAaK,aAAad,GAAY,EAAEC,GAAa,EAAE;QACrD,IAAI;YACF,MAAM,EAAEW,GAAE,EAAE,GAAGZ,IAAIa,MAAM;YACzB,MAAM,EAAEX,KAAI,EAAE,GAAGF,IAAIG,IAAI;YACzB,MAAMC,SAAS,MAAMC,sBAAa,CAACS,YAAY,CAACF,IAAIV;YACpDD,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACH;QACvB,EAAE,OAAOI,KAAK;YACZ,IAAIA,IAAIC,OAAO,KAAK,yBAAyB;gBAC3CR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAASD,IAAIC,OAAO;gBAAC;YAC9C,OAAO;gBACLR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEE,SAAS;gBAAuB;YACzD,CAAC;QACH;IACF;IACA,aAAaM,aAAaf,GAAY,EAAEC,GAAa,EAAE;QACrD,MAAM,EAAEW,GAAE,EAAE,GAAGZ,IAAIa,MAAM;QACzB,MAAMG,YAAY,MAAMX,sBAAa,CAACU,YAAY,CAACH;QACnD,IAAII,WAAW;YACbf,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEE,SAAS;YAAiB;QACnD,OAAO;YACLR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEE,SAAS;YAAmB;QACrD,CAAC;IACH;AACF"}