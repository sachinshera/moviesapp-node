{"version":3,"sources":["../../../src/controllers/genres/genres.assoc.controller.ts"],"sourcesContent":["import GenresAssocService from '@/services/genres/genres.assoc.service';\r\nimport { Request, Response } from 'express';\r\n\r\nexport default class GenresAssocController {\r\n  static async createGenresAssoc(req: Request, res: Response) {\r\n    const { movies_series_id, genreId, type } = req.body;\r\n    try {\r\n      const genresAssoc = await GenresAssocService.createGenresAssoc(movies_series_id, genreId, type);\r\n      res.status(201).json({\r\n        success: true,\r\n        data: genresAssoc,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getAllGenresAssoc(req: Request, res: Response) {\r\n    try {\r\n      const genresAssoc = await GenresAssocService.getAllGenresAssoc();\r\n      res.status(200).json(genresAssoc);\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getGenresAssocById(req: Request, res: Response) {\r\n    const { id } = req.params;\r\n    try {\r\n      const genresAssoc = await GenresAssocService.getGenresAssocById(id);\r\n      if (!genresAssoc) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'GenresAssoc not found',\r\n        });\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        data: genresAssoc,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async updateGenresAssoc(req: Request, res: Response) {\r\n    const { id } = req.params;\r\n    const { movies_series_id, genreId, type } = req.body;\r\n    try {\r\n      const genresAssoc = await GenresAssocService.updateGenresAssoc(id, movies_series_id, genreId, type);\r\n      if (!genresAssoc) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'GenresAssoc not found',\r\n        });\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        data: genresAssoc,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  static async deleteGenresAssoc(req: Request, res: Response) {\r\n    const { id } = req.params;\r\n    try {\r\n      const genresAssoc = await GenresAssocService.deleteGenresAssoc(id);\r\n      if (!genresAssoc) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'GenresAssoc not found',\r\n        });\r\n      }\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'GenresAssoc deleted successfully',\r\n        data: genresAssoc,\r\n      });\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  // get by genres id\r\n\r\n  static async getAllByGenreid(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const genresAssoc = await GenresAssocService.getAllByGenreId(id);\r\n      if (!genresAssoc) {\r\n        return res.status(404).json({\r\n          success: false,\r\n          message: 'GenresAssoc not found',\r\n        });\r\n      }\r\n      res.status(200).json(genresAssoc);\r\n    } catch (err) {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Internal server error',\r\n        error: err.message,\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":["GenresAssocController","createGenresAssoc","req","res","movies_series_id","genreId","type","body","genresAssoc","GenresAssocService","status","json","success","data","err","message","error","getAllGenresAssoc","getGenresAssocById","id","params","updateGenresAssoc","deleteGenresAssoc","getAllByGenreid","getAllByGenreId"],"mappings":"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"}