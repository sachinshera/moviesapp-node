{"version":3,"sources":["../../src/controllers/login.controller.ts"],"sourcesContent":["import { LoginServie } from '@/services/login.service';\nimport { TokenService } from '@/services/token.service';\nimport { Request, Response } from 'express';\nexport class LoginController {\n  public static async login(req: Request, res: Response) {\n    const username = req.body.username;\n    const password = req.body.password;\n    try {\n      const loginResult = await LoginServie.login(username, password);\n      if (loginResult == 'user not found') {\n        return res.status(404).json({\n          message: 'INVALID CREDENTIALS',\n        });\n      }\n      if (loginResult == 'error in token generation') {\n        return res.status(500).json({\n          message: 'INTERNAL SERVER ERROR',\n        });\n      } else {\n        return res.status(200).json({\n          message: 'LOGIN SUCCESS',\n          token: loginResult,\n        });\n      }\n    } catch (err) {\n      res.status(500).json({\n        message: 'INTERNAL SERVER ERROR',\n      });\n    }\n  }\n\n  // verifytoken\n\n  public static async verifyToken(req: Request, res: Response) {\n    const token = req.body.token;\n    try {\n      const verifyToken = await TokenService.verifyToken(token);\n      if (verifyToken) {\n        return res.status(200).json({\n          message: 'TOKEN VERIFIED',\n        });\n      } else {\n        return res.status(404).json({\n          message: 'INVALID TOKEN',\n        });\n      }\n    } catch (err) {\n      res.status(500).json({\n        message: 'INTERNAL SERVER ERROR',\n      });\n    }\n  }\n\n  // refresh token\n\n  public static async refreshToken(req: Request, res: Response) {\n    const token = req.body.token;\n    const userame = req.body.username;\n    try {\n      const verifyToken = await TokenService.verifyToken(token);\n      // delete privous tokens\n      await TokenService.removeAllTokensByUserId(userame);\n      if (verifyToken) {\n        const newToken = await TokenService.gererateToken(userame);\n        if (!newToken) {\n          console.log('64', newToken);\n          return res.status(500).json({\n            message: 'INTERNAL SERVER ERROR',\n          });\n        } else {\n          return res.status(200).json({\n            message: 'TOKEN REFRESHED',\n            token: newToken,\n          });\n        }\n      } else {\n        return res.status(404).json({\n          message: 'INVALID TOKEN',\n        });\n      }\n    } catch (err) {\n      console.log('79', err);\n      res.status(500).json({\n        message: 'INTERNAL SERVER ERROR',\n      });\n    }\n  }\n}\n"],"names":["LoginController","login","req","res","username","body","password","loginResult","LoginServie","status","json","message","token","err","verifyToken","TokenService","refreshToken","userame","removeAllTokensByUserId","newToken","gererateToken","console","log"],"mappings":";;;;+BAGaA;;;eAAAA;;;8BAHe;8BACC;AAEtB,IAAA,AAAMA,kBAAN,MAAMA;IACX,aAAoBC,MAAMC,GAAY,EAAEC,GAAa,EAAE;QACrD,MAAMC,WAAWF,IAAIG,IAAI,CAACD,QAAQ;QAClC,MAAME,WAAWJ,IAAIG,IAAI,CAACC,QAAQ;QAClC,IAAI;YACF,MAAMC,cAAc,MAAMC,yBAAW,CAACP,KAAK,CAACG,UAAUE;YACtD,IAAIC,eAAe,kBAAkB;gBACnC,OAAOJ,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;gBACX;YACF,CAAC;YACD,IAAIJ,eAAe,6BAA6B;gBAC9C,OAAOJ,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;gBACX;YACF,OAAO;gBACL,OAAOR,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;oBACTC,OAAOL;gBACT;YACF,CAAC;QACH,EAAE,OAAOM,KAAK;YACZV,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS;YACX;QACF;IACF;IAIA,aAAoBG,YAAYZ,GAAY,EAAEC,GAAa,EAAE;QAC3D,MAAMS,QAAQV,IAAIG,IAAI,CAACO,KAAK;QAC5B,IAAI;YACF,MAAME,cAAc,MAAMC,0BAAY,CAACD,WAAW,CAACF;YACnD,IAAIE,aAAa;gBACf,OAAOX,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;gBACX;YACF,OAAO;gBACL,OAAOR,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;gBACX;YACF,CAAC;QACH,EAAE,OAAOE,KAAK;YACZV,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS;YACX;QACF;IACF;IAIA,aAAoBK,aAAad,GAAY,EAAEC,GAAa,EAAE;QAC5D,MAAMS,QAAQV,IAAIG,IAAI,CAACO,KAAK;QAC5B,MAAMK,UAAUf,IAAIG,IAAI,CAACD,QAAQ;QACjC,IAAI;YACF,MAAMU,cAAc,MAAMC,0BAAY,CAACD,WAAW,CAACF;YAEnD,MAAMG,0BAAY,CAACG,uBAAuB,CAACD;YAC3C,IAAIH,aAAa;gBACf,MAAMK,WAAW,MAAMJ,0BAAY,CAACK,aAAa,CAACH;gBAClD,IAAI,CAACE,UAAU;oBACbE,QAAQC,GAAG,CAAC,MAAMH;oBAClB,OAAOhB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAC1BC,SAAS;oBACX;gBACF,OAAO;oBACL,OAAOR,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAC1BC,SAAS;wBACTC,OAAOO;oBACT;gBACF,CAAC;YACH,OAAO;gBACL,OAAOhB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAC1BC,SAAS;gBACX;YACF,CAAC;QACH,EAAE,OAAOE,KAAK;YACZQ,QAAQC,GAAG,CAAC,MAAMT;YAClBV,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS;YACX;QACF;IACF;AACF"}