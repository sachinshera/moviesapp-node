{"version":3,"sources":["../../../src/controllers/series/series.controller.ts"],"sourcesContent":["import CategoryAssocService from '@/services/category/category.assoc.service';\nimport GenresAssocService from '@/services/genres/genres.assoc.service';\nimport { SeriesService } from '@/services/series/series.service';\nimport { Request, Response } from 'express';\nexport class SeriesController {\n  // add series\n  public static async addSeries(req: Request, res: Response) {\n    try {\n      const addSeries = await SeriesService.createSeries(req.body);\n      res.send(addSeries);\n    } catch (err) {\n      if (err.message == 'Series already exists') {\n        res.status(400).json({\n          message: 'Series already exists',\n        });\n      }\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   get all series\n  public static async getAllSeries(req: Request, res: Response) {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as any) : 10;\n      const offset = req.query.offset ? parseInt(req.query.offset as any) : 0;\n      const q = req.query.q ? (req.query.q as any) : '';\n      const date = req.query.date ? (req.query.date as any) : '';\n      const getAllSeries = await SeriesService.getAllSeries(limit, offset, q, date);\n      res.send(getAllSeries);\n    } catch (err) {\n      console.log('err', err);\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   get series by id\n\n  public static async getSeriesById(req: Request, res: Response) {\n    try {\n      const getSeriesById = await SeriesService.getSeriesById(req.params.id);\n      res.send(getSeriesById);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   update series by id\n  public static async updateSeriesById(req: Request, res: Response) {\n    try {\n      const updateSeriesById = await SeriesService.updateSeries(req.params.id, req.body);\n      res.send(updateSeriesById);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   delete series by id\n\n  public static async deleteSeriesById(req: Request, res: Response) {\n    try {\n      const deleteSeriesById = await SeriesService.deleteSeries(req.params.id);\n      res.status(200).json({\n        message: 'series deleted successfully',\n      });\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  // get series by genre id\n  public static async getSeriesByGenreId(req: Request, res: Response) {\n    try {\n      const getSeriesByGenreId = await GenresAssocService.getSeriesByGenreId(req.params.id);\n      res.send(getSeriesByGenreId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  // get series by category id\n\n  public static async getSeriesByCategoryId(req: Request, res: Response) {\n    try {\n      const getSeriesByCategoryId = await CategoryAssocService.getSeriesByCategoryId(req.params.id);\n      res.send(getSeriesByCategoryId);\n    } catch (err) {\n      console.log('err', err);\n\n      res.status(500).send('Internal Server Error');\n    }\n  }\n}\n"],"names":["SeriesController","addSeries","req","res","SeriesService","createSeries","body","send","err","message","status","json","getAllSeries","limit","query","parseInt","offset","q","date","console","log","getSeriesById","params","id","updateSeriesById","updateSeries","deleteSeriesById","deleteSeries","getSeriesByGenreId","GenresAssocService","getSeriesByCategoryId","CategoryAssocService"],"mappings":"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"}