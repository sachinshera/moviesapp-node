{"version":3,"sources":["../../../src/controllers/series/series.season.controller.ts"],"sourcesContent":["import { SeriesSeasonService } from '@/services/series/series.season.service';\nimport { Request, Response } from 'express';\n\nexport class SeriesSeasonController {\n  // add new season\n  public static async addSeason(req: Request, res: Response) {\n    try {\n      const seriesId = req.params.seriesId;\n      const addSeason = await SeriesSeasonService.addSeason(seriesId, req.body);\n      return res.status(200).json(addSeason);\n    } catch (err) {\n      console.log(err);\n      if (err.message == 'Series not found') {\n        res.status(400).json({\n          message: 'Series not found',\n        });\n      }\n      if (err.message == 'Season already exists') {\n        res.status(400).json({\n          message: 'Season already exists',\n        });\n      } else {\n        res.status(500).send('Internal Server Error');\n      }\n    }\n  }\n\n  // get all seasons\n\n  public static async getAllSeasons(req: Request, res: Response) {\n    try {\n      const seriesId = req.params.seriesId;\n      const getAllSeasons = await SeriesSeasonService.getAllSeasons(seriesId);\n      res.send(getAllSeasons);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   get season by id\n\n  public static async getSeasonById(req: Request, res: Response) {\n    try {\n      const seriesId = req.params.seriesId;\n      const seasonId = req.params.seasonId;\n      const getSeasonById = await SeriesSeasonService.getSeasonById(seriesId, seasonId);\n      res.send(getSeasonById);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //   update season by id\n  public static async updateSeasonById(req: Request, res: Response) {\n    try {\n      const seriesId = req.params.seriesId;\n      const seasonId = req.params.seasonId;\n      const updateSeasonById = await SeriesSeasonService.updateSeason(seriesId, seasonId, req.body);\n      res.send(updateSeasonById);\n    } catch (err) {\n      console.log(err);\n      if (err.message == 'Season does not exist') {\n        res.status(400).json({\n          message: 'Season does not exist',\n        });\n      } else {\n        res.status(500).send('Internal Server Error');\n      }\n    }\n  }\n\n  //   delete season by id\n\n  public static async deleteSeasonById(req: Request, res: Response) {\n    try {\n      const seriesId = req.params.seriesId;\n      const seasonId = req.params.seasonId;\n      const deleteSeasonById = await SeriesSeasonService.deleteSeason(seriesId, seasonId);\n      res.status(200).json({\n        message: 'Season deleted successfully',\n      });\n    } catch (err) {\n      res.status(404).send('Failed to delete season');\n    }\n  }\n}\n"],"names":["SeriesSeasonController","addSeason","req","res","seriesId","params","SeriesSeasonService","body","status","json","err","console","log","message","send","getAllSeasons","getSeasonById","seasonId","updateSeasonById","updateSeason","deleteSeasonById","deleteSeason"],"mappings":";;;;+BAGaA;;;eAAAA;;;qCAHuB;AAG7B,IAAA,AAAMA,yBAAN,MAAMA;IAEX,aAAoBC,UAAUC,GAAY,EAAEC,GAAa,EAAE;QACzD,IAAI;YACF,MAAMC,WAAWF,IAAIG,MAAM,CAACD,QAAQ;YACpC,MAAMH,YAAY,MAAMK,wCAAmB,CAACL,SAAS,CAACG,UAAUF,IAAIK,IAAI;YACxE,OAAOJ,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAACR;QAC9B,EAAE,OAAOS,KAAK;YACZC,QAAQC,GAAG,CAACF;YACZ,IAAIA,IAAIG,OAAO,IAAI,oBAAoB;gBACrCV,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBI,SAAS;gBACX;YACF,CAAC;YACD,IAAIH,IAAIG,OAAO,IAAI,yBAAyB;gBAC1CV,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBI,SAAS;gBACX;YACF,OAAO;gBACLV,IAAIK,MAAM,CAAC,KAAKM,IAAI,CAAC;YACvB,CAAC;QACH;IACF;IAIA,aAAoBC,cAAcb,GAAY,EAAEC,GAAa,EAAE;QAC7D,IAAI;YACF,MAAMC,WAAWF,IAAIG,MAAM,CAACD,QAAQ;YACpC,MAAMW,gBAAgB,MAAMT,wCAAmB,CAACS,aAAa,CAACX;YAC9DD,IAAIW,IAAI,CAACC;QACX,EAAE,OAAOL,KAAK;YACZP,IAAIK,MAAM,CAAC,KAAKM,IAAI,CAAC;QACvB;IACF;IAIA,aAAoBE,cAAcd,GAAY,EAAEC,GAAa,EAAE;QAC7D,IAAI;YACF,MAAMC,WAAWF,IAAIG,MAAM,CAACD,QAAQ;YACpC,MAAMa,WAAWf,IAAIG,MAAM,CAACY,QAAQ;YACpC,MAAMD,gBAAgB,MAAMV,wCAAmB,CAACU,aAAa,CAACZ,UAAUa;YACxEd,IAAIW,IAAI,CAACE;QACX,EAAE,OAAON,KAAK;YACZP,IAAIK,MAAM,CAAC,KAAKM,IAAI,CAAC;QACvB;IACF;IAGA,aAAoBI,iBAAiBhB,GAAY,EAAEC,GAAa,EAAE;QAChE,IAAI;YACF,MAAMC,WAAWF,IAAIG,MAAM,CAACD,QAAQ;YACpC,MAAMa,WAAWf,IAAIG,MAAM,CAACY,QAAQ;YACpC,MAAMC,mBAAmB,MAAMZ,wCAAmB,CAACa,YAAY,CAACf,UAAUa,UAAUf,IAAIK,IAAI;YAC5FJ,IAAIW,IAAI,CAACI;QACX,EAAE,OAAOR,KAAK;YACZC,QAAQC,GAAG,CAACF;YACZ,IAAIA,IAAIG,OAAO,IAAI,yBAAyB;gBAC1CV,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;oBACnBI,SAAS;gBACX;YACF,OAAO;gBACLV,IAAIK,MAAM,CAAC,KAAKM,IAAI,CAAC;YACvB,CAAC;QACH;IACF;IAIA,aAAoBM,iBAAiBlB,GAAY,EAAEC,GAAa,EAAE;QAChE,IAAI;YACF,MAAMC,WAAWF,IAAIG,MAAM,CAACD,QAAQ;YACpC,MAAMa,WAAWf,IAAIG,MAAM,CAACY,QAAQ;YACpC,MAAMG,mBAAmB,MAAMd,wCAAmB,CAACe,YAAY,CAACjB,UAAUa;YAC1Ed,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBI,SAAS;YACX;QACF,EAAE,OAAOH,KAAK;YACZP,IAAIK,MAAM,CAAC,KAAKM,IAAI,CAAC;QACvB;IACF;AACF"}