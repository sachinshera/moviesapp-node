{"version":3,"sources":["../../../src/controllers/trailer/trailer.controller.ts"],"sourcesContent":["import TrailerService from '@/services/trailer/trailer.service';\nimport { Request, Response } from 'express';\n\nexport class TrailerController {\n  // get all trailers\n  public static async getAllTrailers(req: Request, res: Response) {\n    try {\n      const getAllTrailers = await TrailerService.getAllTrailers();\n      res.send(getAllTrailers);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n  //  create trailer\n  public static async createTrailer(req: Request, res: Response) {\n    try {\n      const data = req.body;\n      const createTrailer = await TrailerService.createTrailer(data);\n      res.send(createTrailer);\n    } catch (err) {\n      console.log(err);\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  get trailer by movie id\n\n  public static async getTrailerByMovieId(req: Request, res: Response) {\n    try {\n      const getTrailerByMovieId = await TrailerService.getTrailerByMovieId(req.params.id);\n      res.send(getTrailerByMovieId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  get trailer by series id\n\n  public static async getTrailerBySeriesId(req: Request, res: Response) {\n    try {\n      const getTrailerBySeriesId = await TrailerService.getTrailerBySeriesId(req.params.id);\n      res.send(getTrailerBySeriesId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  update trailer by movie id\n\n  public static async updateTrailerByMovieId(req: Request, res: Response) {\n    try {\n      const updateTrailerByMovieId = await TrailerService.updateTrailerByMovieId(req.params.id, req.body);\n      res.send(updateTrailerByMovieId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  update trailer by series id\n\n  public static async updateTrailerBySeriesId(req: Request, res: Response) {\n    try {\n      const updateTrailerBySeriesId = await TrailerService.updateTrailerBySeriesId(req.params.id, req.body);\n      res.send(updateTrailerBySeriesId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  delete trailer by movie id\n\n  public static async deleteTrailerByMovieId(req: Request, res: Response) {\n    try {\n      const deleteTrailerByMovieId = await TrailerService.deleteTrailerByMovieId(req.params.id);\n      res.send(deleteTrailerByMovieId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  delete trailer by series id\n\n  public static async deleteTrailerBySeriesId(req: Request, res: Response) {\n    try {\n      const deleteTrailerBySeriesId = await TrailerService.deleteTrailerBySeriesId(req.params.id);\n      res.send(deleteTrailerBySeriesId);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  //  delete trailer by id\n\n  public static async deleteTrailerById(req: Request, res: Response) {\n    try {\n      const deleteTrailerById = await TrailerService.deleteTrailerById(req.params.id);\n      res.sendStatus(200).send(deleteTrailerById);\n    } catch (err) {\n      res.status(500).send('Internal Server Error');\n    }\n  }\n}\n"],"names":["TrailerController","getAllTrailers","req","res","TrailerService","send","err","status","createTrailer","data","body","console","log","getTrailerByMovieId","params","id","getTrailerBySeriesId","updateTrailerByMovieId","updateTrailerBySeriesId","deleteTrailerByMovieId","deleteTrailerBySeriesId","deleteTrailerById","sendStatus"],"mappings":"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"}