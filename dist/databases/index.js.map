{"version":3,"sources":["../../src/databases/index.ts"],"sourcesContent":["import SessionTokenModel from './../models/session.token.model';\nimport Sequelize from 'sequelize';\nimport { NODE_ENV, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE } from '@config';\nimport UserModel from '@models/users.model';\nimport { logger } from '@utils/logger';\nimport AdminUserModel from '@/models/admin.user.model';\nimport VideosModel from '@/models/videos/videos.model';\nimport VideosThumbnailsModel from '@/models/videos/videos.thumnails.model';\nimport VideosSourceModel from '@/models/videos/video.souce.model';\nimport MoviesModel from '@/models/movies/movies.model';\nimport MoviesBannerModel from '@/models/movies/movies.banner.model';\nimport SeriesModel from '@/models/series/series.model';\nimport SeriesSeasonsModel from '@/models/series/series.seasons.model';\nimport SeriesSeasonVideosModel from '@/models/series/series.season.videos.model';\nimport CategoryModel from '@/models/category/category.model';\nimport GenresModel from '@/models/genres/genres.model';\nimport TrailerModel from '@/models/trailer/trailer.model';\nimport CategoryAssocModel from '@/models/category/category.assoc.model';\nimport GenresAssocModel from '@/models/genres/genres.assoc.model';\nconst sequelize = new Sequelize.Sequelize(DB_DATABASE, DB_USER, DB_PASSWORD, {\n  dialect: 'postgres',\n  host: DB_HOST,\n  port: DB_PORT as any,\n  define: {\n    underscored: true,\n    freezeTableName: false,\n  },\n  pool: {\n    min: 0,\n    max: 10,\n  },\n  logQueryParameters: NODE_ENV === 'development',\n  logging: (query, time) => {\n    logger.info(time + 'ms' + ' ' + query);\n  },\n  benchmark: true,\n  set: {\n    FOREIGN_KEY_CHECKS: 0,\n    constraints: false,\n  },\n});\n\nsequelize.authenticate();\n\nconst DB = {\n  Users: UserModel(sequelize),\n  AdminUsers: AdminUserModel(sequelize),\n  SessionTokenModel: SessionTokenModel(sequelize),\n  VideosModel: VideosModel(sequelize),\n  VideosThumbnailsModel: VideosThumbnailsModel(sequelize),\n  VideosSourceModel: VideosSourceModel(sequelize),\n  MoviesModel: MoviesModel(sequelize),\n  SeriesModel: SeriesModel(sequelize),\n  SeriesSeasonVideosModel: SeriesSeasonVideosModel(sequelize),\n  MoviesBannerModel: MoviesBannerModel(sequelize),\n  SeriesSeasonsModel: SeriesSeasonsModel(sequelize),\n  CategoryModel: CategoryModel(sequelize),\n  GenresModel: GenresModel(sequelize),\n  TrailerModel: TrailerModel(sequelize),\n  CategoryAssocModel: CategoryAssocModel(sequelize),\n  GenresAssocModel: GenresAssocModel(sequelize),\n  sequelize, // connection instance (RAW queries)\n  Sequelize, // library\n};\n\nlogger.info('Database connected');\n\nDB.VideosModel.hasMany(DB.VideosSourceModel, {\n  as: 'sources',\n  foreignKey: 'video_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.VideosModel.hasMany(DB.VideosThumbnailsModel, {\n  as: 'thumbnails',\n  foreignKey: 'video_id',\n  constraints: false,\n});\n\n// set associations series , series seasons , series season videos\n// @ts-ignore\nDB.SeriesModel.hasMany(DB.SeriesSeasonsModel, {\n  as: 'seasons',\n  foreignKey: 'series_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.SeriesSeasonsModel.hasMany(DB.SeriesSeasonVideosModel, {\n  as: 'episodes',\n  foreignKey: 'season_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.MoviesModel.hasMany(DB.VideosModel, {\n  as: 'videos',\n  foreignKey: 'id',\n  sourceKey: 'video_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.MoviesModel.hasMany(DB.TrailerModel, {\n  as: 'trailers',\n  foreignKey: 'movies_series_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.SeriesModel.hasMany(DB.TrailerModel, {\n  as: 'trailers',\n  foreignKey: 'movies_series_id',\n  constraints: false,\n});\n// @ts-ignore\n// set associations movies , movies banner , video\n\n// @ts-ignore\n//SeriesSeasonVideosModel and VideosModel are same table\nDB.SeriesSeasonVideosModel.hasMany(DB.VideosModel, {\n  as: 'episodesDetails',\n  foreignKey: 'id',\n  sourceKey: 'video',\n  constraints: false,\n});\n// @ts-ignore\nDB.GenresAssocModel.hasMany(DB.GenresModel, {\n  as: 'genresDetails',\n  foreignKey: 'id',\n  sourceKey: 'genreId',\n  foreignKeyConstraint: false,\n  constraints: false,\n});\n// @ts-ignore\nDB.GenresAssocModel.hasMany(DB.MoviesModel, {\n  as: 'moviesDetails',\n  foreignKey: 'id',\n  sourceKey: 'movies_series_id',\n  constraints: false,\n});\n// @ts-ignore\nDB.GenresAssocModel.hasMany(DB.SeriesModel, {\n  as: 'seriesDetails',\n  foreignKey: 'id',\n  sourceKey: 'movies_series_id',\n  constraints: false,\n});\n\n// category model and assoc model\n// @ts-ignore\nDB.CategoryAssocModel.hasMany(DB.CategoryModel, {\n  as: 'categoryDetails',\n  foreignKey: 'id',\n  sourceKey: 'categoryId',\n  constraints: false,\n});\n// @ts-ignore\nDB.CategoryAssocModel.hasMany(DB.MoviesModel, {\n  as: 'moviesDetails',\n  sourceKey: 'series_movie_id',\n  foreignKey: 'id',\n  foreignKeyConstraint: false,\n  constraints: false,\n});\n\n// @ts-ignore\nDB.CategoryAssocModel.hasMany(DB.SeriesModel, {\n  as: 'seriesDetails',\n  sourceKey: 'series_movie_id',\n  foreignKey: 'id',\n  constraints: false,\n});\n\nDB.MoviesModel.hasMany(DB.MoviesBannerModel, {\n  as: 'banners',\n  foreignKey: 'contentId',\n  sourceKey: 'id',\n  constraints: false,\n});\n\nDB.SeriesModel.hasMany(DB.MoviesBannerModel, {\n  as: 'banners',\n  foreignKey: 'contentId',\n  sourceKey: 'id',\n  constraints: false,\n});\n\nexport default DB;\n"],"names":["sequelize","Sequelize","DB_DATABASE","DB_USER","DB_PASSWORD","dialect","host","DB_HOST","port","DB_PORT","define","underscored","freezeTableName","pool","min","max","logQueryParameters","NODE_ENV","logging","query","time","logger","info","benchmark","set","FOREIGN_KEY_CHECKS","constraints","authenticate","DB","Users","UserModel","AdminUsers","AdminUserModel","SessionTokenModel","VideosModel","VideosThumbnailsModel","VideosSourceModel","MoviesModel","SeriesModel","SeriesSeasonVideosModel","MoviesBannerModel","SeriesSeasonsModel","CategoryModel","GenresModel","TrailerModel","CategoryAssocModel","GenresAssocModel","hasMany","as","foreignKey","sourceKey","foreignKeyConstraint"],"mappings":"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"}