{"version":3,"sources":["../../../src/services/category/category.assoc.service.ts"],"sourcesContent":["import { CategoryAssocModel } from '@/models/category/category.assoc.model';\r\nimport { nanoid } from 'nanoid';\r\nimport { Op } from 'sequelize';\r\nexport default class CategoryAssocService {\r\n  static async AddAssoc(data: CategoryAssocModel) {\r\n    try {\r\n      // check exist\r\n      let check = await CategoryAssocModel.findOne({\r\n        where: {\r\n          series_movie_id: data.series_movie_id,\r\n        },\r\n      });\r\n      if (check) {\r\n        throw new Error('Already exists');\r\n      }\r\n      let add = await CategoryAssocModel.create({\r\n        id: nanoid(20),\r\n        ...data,\r\n      });\r\n      return add;\r\n    } catch (e) {\r\n      throw new Error(e);\r\n    }\r\n  }\r\n\r\n  static async getAll() {\r\n    return await CategoryAssocModel.findAll({\r\n      include: [\r\n        {\r\n          association: 'categoryDetails',\r\n          attributes: ['name'],\r\n        },\r\n        {\r\n          association: 'moviesDetails',\r\n        },\r\n        {\r\n          association: 'seriesDetails',\r\n        },\r\n      ],\r\n      attributes: ['id', 'type'],\r\n    });\r\n  }\r\n\r\n  static async update(data: CategoryAssocModel) {\r\n    try {\r\n      // check exist\r\n      let check = await CategoryAssocModel.findOne({\r\n        where: {\r\n          series_movie_id: data.series_movie_id,\r\n        },\r\n      });\r\n      if (!check) {\r\n        throw new Error('Not found');\r\n      }\r\n      let update = await CategoryAssocModel.update(data, {\r\n        where: {\r\n          series_movie_id: data.series_movie_id,\r\n        },\r\n      });\r\n\r\n      // get updated data\r\n      let updated = await CategoryAssocModel.findOne({\r\n        where: {\r\n          series_movie_id: data.series_movie_id,\r\n        },\r\n      });\r\n      return updated;\r\n    } catch (error) {\r\n      throw new Error(error.toString());\r\n    }\r\n  }\r\n\r\n  // delete by id or series_movie_id\r\n\r\n  static async delete(id: string) {\r\n    try {\r\n      let del = await CategoryAssocModel.destroy({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n      return del;\r\n    } catch (error) {\r\n      throw new Error('Failed to delete');\r\n    }\r\n  }\r\n\r\n  // get movies by category id\r\n\r\n  static async getMoviesByCategoryId(id: string) {\r\n    try {\r\n      let get: any = await CategoryAssocModel.findAll({\r\n        where: {\r\n          category_id: id,\r\n          type: 'movie',\r\n        },\r\n        include: [\r\n          {\r\n            association: 'moviesDetails',\r\n            where: {\r\n              id: {\r\n                [Op.not]: null,\r\n              },\r\n            },\r\n            include: [\r\n              {\r\n                association: 'banners',\r\n                as: 'banners',\r\n              },\r\n              {\r\n                association: 'videos',\r\n                as: 'videos',\r\n                include: [\r\n                  {\r\n                    association: 'sources',\r\n                    as: 'sources',\r\n                  },\r\n                  {\r\n                    association: 'thumbnails',\r\n                    as: 'thumbnails',\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                association: 'trailers',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'categoryDetails',\r\n          },\r\n        ],\r\n      });\r\n      let movies = get.map(item => item.moviesDetails);\r\n      return movies;\r\n    } catch (error) {\r\n      throw new Error(error.toString());\r\n    }\r\n  }\r\n\r\n  // get series by category id\r\n  // @ts-ignore\r\n  static async getSeriesByCategoryId(id: string) {\r\n    try {\r\n      let get: any = await CategoryAssocModel.findAll({\r\n        where: {\r\n          category_id: id,\r\n        },\r\n        include: [\r\n          {\r\n            association: 'seriesDetails',\r\n            where: {\r\n              id: {\r\n                [Op.not]: null,\r\n              },\r\n            },\r\n            include: [\r\n              {\r\n                association: 'seasons',\r\n                include: [\r\n                  {\r\n                    association: 'episodes',\r\n                    include: [\r\n                      {\r\n                        association: 'episodesDetails',\r\n                        include: [\r\n                          {\r\n                            association: 'sources',\r\n                          },\r\n                          {\r\n                            association: 'thumbnails',\r\n                          },\r\n                        ],\r\n                      },\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                association: 'trailers',\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      });\r\n      let series = get.map(item => item.seriesDetails);\r\n      return series;\r\n    } catch (error) {\r\n      throw new Error(error.toString());\r\n    }\r\n  }\r\n}\r\n"],"names":["CategoryAssocService","AddAssoc","data","check","CategoryAssocModel","findOne","where","series_movie_id","Error","add","create","id","nanoid","e","getAll","findAll","include","association","attributes","update","updated","error","toString","delete","del","destroy","getMoviesByCategoryId","get","category_id","type","Op","not","as","movies","map","item","moviesDetails","getSeriesByCategoryId","series","seriesDetails"],"mappings":"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"}