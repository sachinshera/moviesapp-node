{"version":3,"sources":["../../../src/services/category/category.service.ts"],"sourcesContent":["import { CategoryModel } from '@/models/category/category.model';\nimport { nanoid } from 'nanoid';\n\nexport default class CategoryService {\n  static async createCategory(name: string): Promise<CategoryModel> {\n    // ccheck if category already exists\n    const categoryExists = await CategoryModel.findOne({ where: { name } });\n    if (categoryExists) {\n      throw new Error('Category already exists');\n    }\n    const category = new CategoryModel();\n    category.id = nanoid(20);\n    category.name = name;\n    await category.save();\n    return category;\n  }\n  static async getAllCategories(): Promise<CategoryModel[]> {\n    return await CategoryModel.findAll();\n  }\n  static async getCategoryById(id: string): Promise<CategoryModel | null> {\n    return await CategoryModel.findOne({ where: { id } });\n  }\n  static async updateCategory(id: string, name: string): Promise<CategoryModel | null> {\n    try {\n      // ccheck if category already exists\n      const categoryExists = await CategoryModel.findOne({ where: { name } });\n      if (categoryExists) {\n        throw new Error('Category already exists');\n      }\n      //   update category\n      await CategoryModel.update({ name }, { where: { id } });\n      return await CategoryModel.findOne({ where: { id } });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n  static async deleteCategory(id: string): Promise<boolean> {\n    try {\n      await CategoryModel.destroy({ where: { id } });\n      return true;\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n}\n"],"names":["CategoryService","createCategory","name","categoryExists","CategoryModel","findOne","where","Error","category","id","nanoid","save","getAllCategories","findAll","getCategoryById","updateCategory","update","err","deleteCategory","destroy"],"mappings":";;;;;;;eAGqBA;;;+BAHS;wBACP;AAER,IAAA,AAAMA,kBAAN,MAAMA;IACnB,aAAaC,eAAeC,IAAY,EAA0B;QAEhE,MAAMC,iBAAiB,MAAMC,4BAAa,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEJ;YAAK;QAAE;QACrE,IAAIC,gBAAgB;YAClB,MAAM,IAAII,MAAM,2BAA2B;QAC7C,CAAC;QACD,MAAMC,WAAW,IAAIJ,4BAAa;QAClCI,SAASC,EAAE,GAAGC,IAAAA,cAAM,EAAC;QACrBF,SAASN,IAAI,GAAGA;QAChB,MAAMM,SAASG,IAAI;QACnB,OAAOH;IACT;IACA,aAAaI,mBAA6C;QACxD,OAAO,MAAMR,4BAAa,CAACS,OAAO;IACpC;IACA,aAAaC,gBAAgBL,EAAU,EAAiC;QACtE,OAAO,MAAML,4BAAa,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEG;YAAG;QAAE;IACrD;IACA,aAAaM,eAAeN,EAAU,EAAEP,IAAY,EAAiC;QACnF,IAAI;YAEF,MAAMC,iBAAiB,MAAMC,4BAAa,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEJ;gBAAK;YAAE;YACrE,IAAIC,gBAAgB;gBAClB,MAAM,IAAII,MAAM,2BAA2B;YAC7C,CAAC;YAED,MAAMH,4BAAa,CAACY,MAAM,CAAC;gBAAEd;YAAK,GAAG;gBAAEI,OAAO;oBAAEG;gBAAG;YAAE;YACrD,OAAO,MAAML,4BAAa,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEG;gBAAG;YAAE;QACrD,EAAE,OAAOQ,KAAK;YACZ,MAAM,IAAIV,MAAMU,KAAK;QACvB;IACF;IACA,aAAaC,eAAeT,EAAU,EAAoB;QACxD,IAAI;YACF,MAAML,4BAAa,CAACe,OAAO,CAAC;gBAAEb,OAAO;oBAAEG;gBAAG;YAAE;YAC5C,OAAO,IAAI;QACb,EAAE,OAAOQ,KAAK;YACZ,MAAM,IAAIV,MAAMU,KAAK;QACvB;IACF;AACF"}