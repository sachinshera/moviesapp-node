{"version":3,"sources":["../../../src/services/genres/genres.assoc.service.ts"],"sourcesContent":["import { GenresAssocModel } from '@/models/genres/genres.assoc.model';\r\nimport { nanoid } from 'nanoid';\r\nimport { Op } from 'sequelize';\r\nexport default class GenresAssocService {\r\n  static async createGenresAssoc(movies_series_id: string, genreId: string, type: string) {\r\n    try {\r\n      // check existing\r\n      const existing = await GenresAssocModel.findOne({\r\n        where: {\r\n          movies_series_id,\r\n          genreId,\r\n          type,\r\n        },\r\n      });\r\n\r\n      if (existing) {\r\n        throw new Error('GenresAssoc already exists');\r\n      }\r\n      const genresAssoc = await GenresAssocModel.create({\r\n        id: nanoid(20),\r\n        movies_series_id,\r\n        genreId,\r\n        type,\r\n      });\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  static async getAllGenresAssoc() {\r\n    try {\r\n      const genresAssoc = await GenresAssocModel.findAll({\r\n        include: [\r\n          {\r\n            association: 'genresDetails',\r\n          },\r\n          {\r\n            association: 'moviesDetails',\r\n          },\r\n        ],\r\n      });\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  static async getGenresAssocById(id: string) {\r\n    try {\r\n      const genresAssoc = await GenresAssocModel.findOne({\r\n        where: {\r\n          id,\r\n        },\r\n      });\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  static async updateGenresAssoc(id: string, movies_series_id: string, genreId: string, type: string) {\r\n    try {\r\n      const genresAssoc = await GenresAssocModel.update(\r\n        {\r\n          movies_series_id,\r\n          genreId,\r\n          type,\r\n        },\r\n        {\r\n          where: {\r\n            id,\r\n          },\r\n        },\r\n      );\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  static async deleteGenresAssoc(id: string) {\r\n    try {\r\n      const genresAssoc = await GenresAssocModel.destroy({\r\n        where: {\r\n          id,\r\n        },\r\n      });\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // get all by genre id\r\n  static async getAllByGenreId(genreId: string) {\r\n    try {\r\n      const genresAssoc = await GenresAssocModel.findAll({\r\n        where: {\r\n          genreId,\r\n        },\r\n        include: [\r\n          {\r\n            association: 'moviesDetails',\r\n          },\r\n          {\r\n            association: 'seriesDetails',\r\n          },\r\n          {\r\n            association: 'genresDetails',\r\n          },\r\n        ],\r\n        attributes: ['type'],\r\n      });\r\n      return genresAssoc;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // get movies by genre id\r\n\r\n  static async getMoviesByGenreId(genreId: string) {\r\n    try {\r\n      const genresAssoc: any = await GenresAssocModel.findAll({\r\n        where: {\r\n          genreId,\r\n        },\r\n        include: [\r\n          {\r\n            association: 'moviesDetails',\r\n            where: {\r\n              id: {\r\n                [Op.not]: null,\r\n              },\r\n            },\r\n            include: [\r\n              {\r\n                association: 'banners',\r\n                as: 'banners',\r\n              },\r\n              {\r\n                association: 'videos',\r\n                as: 'videos',\r\n                include: [\r\n                  {\r\n                    association: 'sources',\r\n                    as: 'sources',\r\n                  },\r\n                  {\r\n                    association: 'thumbnails',\r\n                    as: 'thumbnails',\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                association: 'trailers',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'genresDetails',\r\n          },\r\n        ],\r\n      });\r\n      // combine all movies\r\n      let movies = genresAssoc.map(item => item.moviesDetails);\r\n      return movies;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  // get series by genre id\r\n\r\n  static async getSeriesByGenreId(genreId: string) {\r\n    try {\r\n      const genresAssoc: any = await GenresAssocModel.findAll({\r\n        where: {\r\n          genreId,\r\n        },\r\n        include: [\r\n          {\r\n            association: 'seriesDetails',\r\n            where: {\r\n              id: {\r\n                [Op.not]: null,\r\n              },\r\n            },\r\n            include: [\r\n              {\r\n                association: 'seasons',\r\n                include: [\r\n                  {\r\n                    association: 'episodes',\r\n                    include: [\r\n                      {\r\n                        association: 'episodesDetails',\r\n                        include: [\r\n                          {\r\n                            association: 'sources',\r\n                          },\r\n                          {\r\n                            association: 'thumbnails',\r\n                          },\r\n                        ],\r\n                      },\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n              {\r\n                association: 'trailers',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'genresDetails',\r\n          },\r\n        ],\r\n      });\r\n      // combine all series\r\n      let series = genresAssoc.map(item => item.seriesDetails);\r\n      return series;\r\n    } catch (e) {\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n"],"names":["GenresAssocService","createGenresAssoc","movies_series_id","genreId","type","existing","GenresAssocModel","findOne","where","Error","genresAssoc","create","id","nanoid","err","getAllGenresAssoc","findAll","include","association","getGenresAssocById","updateGenresAssoc","update","deleteGenresAssoc","destroy","getAllByGenreId","attributes","getMoviesByGenreId","Op","not","as","movies","map","item","moviesDetails","e","getSeriesByGenreId","series","seriesDetails"],"mappings":"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"}