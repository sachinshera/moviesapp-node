{"version":3,"sources":["../../../src/services/genres/genres.service.ts"],"sourcesContent":["import { GenresModel } from '@/models/genres/genres.model';\nimport { nanoid } from 'nanoid';\n\nexport default class GenresService {\n  static async createGenres(name: string): Promise<GenresModel> {\n    // ccheck if genres already exists\n    const genresExists = await GenresModel.findOne({ where: { name } });\n    if (genresExists) {\n      throw new Error('Genres already exists');\n    }\n    const genres = new GenresModel();\n    genres.id = nanoid(20);\n    genres.name = name;\n    await genres.save();\n    return genres;\n  }\n  static async getAllGenres(): Promise<GenresModel[]> {\n    return await GenresModel.findAll();\n  }\n  static async getGenresById(id: string): Promise<GenresModel | null> {\n    return await GenresModel.findOne({ where: { id } });\n  }\n  static async updateGenres(id: string, name: string): Promise<GenresModel | null> {\n    try {\n      // ccheck if genres already exists\n      const genresExists = await GenresModel.findOne({ where: { name } });\n      if (genresExists) {\n        throw new Error('Genres already exists');\n      }\n      //   update genres\n      await GenresModel.update({ name }, { where: { id } });\n      return await GenresModel.findOne({ where: { id } });\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n  static async deleteGenres(id: string): Promise<boolean> {\n    const genres = await GenresModel.findOne({ where: { id } });\n    if (genres) {\n      await genres.destroy();\n      return true;\n    }\n    return false;\n  }\n}\n"],"names":["GenresService","createGenres","name","genresExists","GenresModel","findOne","where","Error","genres","id","nanoid","save","getAllGenres","findAll","getGenresById","updateGenres","update","err","deleteGenres","destroy"],"mappings":";;;;;;;eAGqBA;;;6BAHO;wBACL;AAER,IAAA,AAAMA,gBAAN,MAAMA;IACnB,aAAaC,aAAaC,IAAY,EAAwB;QAE5D,MAAMC,eAAe,MAAMC,wBAAW,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEJ;YAAK;QAAE;QACjE,IAAIC,cAAc;YAChB,MAAM,IAAII,MAAM,yBAAyB;QAC3C,CAAC;QACD,MAAMC,SAAS,IAAIJ,wBAAW;QAC9BI,OAAOC,EAAE,GAAGC,IAAAA,cAAM,EAAC;QACnBF,OAAON,IAAI,GAAGA;QACd,MAAMM,OAAOG,IAAI;QACjB,OAAOH;IACT;IACA,aAAaI,eAAuC;QAClD,OAAO,MAAMR,wBAAW,CAACS,OAAO;IAClC;IACA,aAAaC,cAAcL,EAAU,EAA+B;QAClE,OAAO,MAAML,wBAAW,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEG;YAAG;QAAE;IACnD;IACA,aAAaM,aAAaN,EAAU,EAAEP,IAAY,EAA+B;QAC/E,IAAI;YAEF,MAAMC,eAAe,MAAMC,wBAAW,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEJ;gBAAK;YAAE;YACjE,IAAIC,cAAc;gBAChB,MAAM,IAAII,MAAM,yBAAyB;YAC3C,CAAC;YAED,MAAMH,wBAAW,CAACY,MAAM,CAAC;gBAAEd;YAAK,GAAG;gBAAEI,OAAO;oBAAEG;gBAAG;YAAE;YACnD,OAAO,MAAML,wBAAW,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEG;gBAAG;YAAE;QACnD,EAAE,OAAOQ,KAAK;YACZ,MAAM,IAAIV,MAAMU,KAAK;QACvB;IACF;IACA,aAAaC,aAAaT,EAAU,EAAoB;QACtD,MAAMD,SAAS,MAAMJ,wBAAW,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEG;YAAG;QAAE;QACzD,IAAID,QAAQ;YACV,MAAMA,OAAOW,OAAO;YACpB,OAAO,IAAI;QACb,CAAC;QACD,OAAO,KAAK;IACd;AACF"}