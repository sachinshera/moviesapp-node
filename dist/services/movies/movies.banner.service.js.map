{"version":3,"sources":["../../../src/services/movies/movies.banner.service.ts"],"sourcesContent":["import { MoviesBannerModel } from '@/models/movies/movies.banner.model';\nimport { nanoid } from 'nanoid';\n\nexport default class MoviesBannerService {\n  // add new movie banner\n  public static async addMovieBanner(movieBanner: any) {\n    // check if movie banner already exists\n    try {\n      const newMovieBanner = await MoviesBannerModel.create({\n        id: nanoid(),\n        ...movieBanner,\n      });\n      if (newMovieBanner) {\n        return newMovieBanner;\n      } else {\n        throw new Error('Error creating movie banner');\n      }\n    } catch (error) {\n      console.log('error', error);\n      throw new Error(error);\n    }\n  }\n\n  // get all movie banners\n  public static async getAllMovieBanners() {\n    try {\n      const movieBanners = await MoviesBannerModel.findAll();\n      return movieBanners;\n    } catch (error) {\n      console.log('error', error);\n      throw new Error(error);\n    }\n  }\n\n  // get movie banner by id\n  public static async getMovieBannerById(id: string) {\n    try {\n      const movieBanner = await MoviesBannerModel.findOne({\n        where: {\n          id,\n        },\n      });\n      if (movieBanner) {\n        return movieBanner;\n      } else {\n        throw new Error('Error getting movie banner');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  // get movie banner by movie id\n  public static async getMovieBannerByMovieId(movieId: string) {\n    try {\n      const movieBanner = await MoviesBannerModel.findOne({\n        where: {\n          contentId: movieId,\n        },\n      });\n      if (movieBanner) {\n        return movieBanner;\n      } else {\n        throw new Error('Error getting movie banner');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  // update movie banner\n  public static async updateMovieBanner(movieBanner: any) {\n    try {\n      const movieBannerExists = await MoviesBannerModel.findOne({\n        where: {\n          id: movieBanner.id,\n        },\n      });\n\n      if (movieBannerExists) {\n        const updatedMovieBanner = await MoviesBannerModel.update(\n          {\n            ...movieBanner,\n          },\n          {\n            where: {\n              id: movieBanner.id,\n            },\n          },\n        );\n        if (updatedMovieBanner) {\n          // return updated movie banner\n          const UpdatedmovieBanner = await MoviesBannerModel.findOne({\n            where: {\n              id: movieBanner.id,\n            },\n          });\n          return UpdatedmovieBanner;\n        }\n      } else {\n        throw new Error('Movie banner does not exist');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  //   // delete movie banner\n\n  public static async deleteMovieBanner(id: string) {\n    try {\n      const movieBannerExists = await MoviesBannerModel.findOne({\n        where: {\n          id,\n        },\n      });\n\n      if (movieBannerExists) {\n        const deletedMovieBanner = await MoviesBannerModel.destroy({\n          where: {\n            id,\n          },\n        });\n        if (deletedMovieBanner) {\n          return 'Movie banner deleted successfully';\n        }\n      } else {\n        throw new Error('Movie banner does not exist');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n}\n"],"names":["MoviesBannerService","addMovieBanner","movieBanner","newMovieBanner","MoviesBannerModel","create","id","nanoid","Error","error","console","log","getAllMovieBanners","movieBanners","findAll","getMovieBannerById","findOne","where","getMovieBannerByMovieId","movieId","contentId","updateMovieBanner","movieBannerExists","updatedMovieBanner","update","UpdatedmovieBanner","deleteMovieBanner","deletedMovieBanner","destroy"],"mappings":";;;;;;;eAGqBA;;;mCAHa;wBACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAER,IAAA,AAAMA,sBAAN,MAAMA;IAEnB,aAAoBC,eAAeC,WAAgB,EAAE;QAEnD,IAAI;YACF,MAAMC,iBAAiB,MAAMC,oCAAiB,CAACC,MAAM,CAAC;gBACpDC,IAAIC,IAAAA,cAAM;eACPL;YAEL,IAAIC,gBAAgB;gBAClB,OAAOA;YACT,OAAO;gBACL,MAAM,IAAIK,MAAM,+BAA+B;YACjD,CAAC;QACH,EAAE,OAAOC,OAAO;YACdC,QAAQC,GAAG,CAAC,SAASF;YACrB,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;IAGA,aAAoBG,qBAAqB;QACvC,IAAI;YACF,MAAMC,eAAe,MAAMT,oCAAiB,CAACU,OAAO;YACpD,OAAOD;QACT,EAAE,OAAOJ,OAAO;YACdC,QAAQC,GAAG,CAAC,SAASF;YACrB,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;IAGA,aAAoBM,mBAAmBT,EAAU,EAAE;QACjD,IAAI;YACF,MAAMJ,cAAc,MAAME,oCAAiB,CAACY,OAAO,CAAC;gBAClDC,OAAO;oBACLX;gBACF;YACF;YACA,IAAIJ,aAAa;gBACf,OAAOA;YACT,OAAO;gBACL,MAAM,IAAIM,MAAM,8BAA8B;YAChD,CAAC;QACH,EAAE,OAAOC,OAAO;YACd,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;IAGA,aAAoBS,wBAAwBC,OAAe,EAAE;QAC3D,IAAI;YACF,MAAMjB,cAAc,MAAME,oCAAiB,CAACY,OAAO,CAAC;gBAClDC,OAAO;oBACLG,WAAWD;gBACb;YACF;YACA,IAAIjB,aAAa;gBACf,OAAOA;YACT,OAAO;gBACL,MAAM,IAAIM,MAAM,8BAA8B;YAChD,CAAC;QACH,EAAE,OAAOC,OAAO;YACd,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;IAGA,aAAoBY,kBAAkBnB,WAAgB,EAAE;QACtD,IAAI;YACF,MAAMoB,oBAAoB,MAAMlB,oCAAiB,CAACY,OAAO,CAAC;gBACxDC,OAAO;oBACLX,IAAIJ,YAAYI,EAAE;gBACpB;YACF;YAEA,IAAIgB,mBAAmB;gBACrB,MAAMC,qBAAqB,MAAMnB,oCAAiB,CAACoB,MAAM,CACvD,mBACKtB,cAEL;oBACEe,OAAO;wBACLX,IAAIJ,YAAYI,EAAE;oBACpB;gBACF;gBAEF,IAAIiB,oBAAoB;oBAEtB,MAAME,qBAAqB,MAAMrB,oCAAiB,CAACY,OAAO,CAAC;wBACzDC,OAAO;4BACLX,IAAIJ,YAAYI,EAAE;wBACpB;oBACF;oBACA,OAAOmB;gBACT,CAAC;YACH,OAAO;gBACL,MAAM,IAAIjB,MAAM,+BAA+B;YACjD,CAAC;QACH,EAAE,OAAOC,OAAO;YACd,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;IAIA,aAAoBiB,kBAAkBpB,EAAU,EAAE;QAChD,IAAI;YACF,MAAMgB,oBAAoB,MAAMlB,oCAAiB,CAACY,OAAO,CAAC;gBACxDC,OAAO;oBACLX;gBACF;YACF;YAEA,IAAIgB,mBAAmB;gBACrB,MAAMK,qBAAqB,MAAMvB,oCAAiB,CAACwB,OAAO,CAAC;oBACzDX,OAAO;wBACLX;oBACF;gBACF;gBACA,IAAIqB,oBAAoB;oBACtB,OAAO;gBACT,CAAC;YACH,OAAO;gBACL,MAAM,IAAInB,MAAM,+BAA+B;YACjD,CAAC;QACH,EAAE,OAAOC,OAAO;YACd,MAAM,IAAID,MAAMC,OAAO;QACzB;IACF;AACF"}