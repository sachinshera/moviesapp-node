{"version":3,"sources":["../../../src/services/movies/movies.service.ts"],"sourcesContent":["import { MoviesBannerModel } from '@/models/movies/movies.banner.model';\nimport { MoviesModel } from '@/models/movies/movies.model';\nimport { TrailerModel } from '@/models/trailer/trailer.model';\nimport { VideosSourceModel } from '@/models/videos/video.souce.model';\nimport { VideosModel } from '@/models/videos/videos.model';\nimport { VideosThumbnailsModel } from '@/models/videos/videos.thumnails.model';\nimport { nanoid } from 'nanoid';\nexport default class MoviesService {\n  // add new movie\n  public static async addMovie(movie: any) {\n    // check if movie already exists\n    try {\n      const movieExists = await MoviesModel.findOne({\n        where: {\n          title: movie.title,\n        },\n      });\n\n      if (movieExists) {\n        throw new Error('Movie already exists');\n      } else {\n        const newMovie = await MoviesModel.create({\n          id: nanoid(),\n          ...movie,\n        });\n        if (newMovie) {\n          return newMovie;\n        } else {\n          throw new Error('Error creating movie');\n        }\n      }\n    } catch (error) {\n      console.log('error', error);\n      throw new Error(error);\n    }\n  }\n\n  // get all movies\n  public static async getAllMovies() {\n    try {\n      const movies = await MoviesModel.findAll({\n        order: [['createdAt', 'DESC']],\n        include: [\n          {\n            model: MoviesBannerModel,\n            as: 'banners',\n          },\n          {\n            model: VideosModel,\n            as: 'videos',\n            include: [\n              {\n                model: VideosSourceModel,\n                as: 'sources',\n              },\n              {\n                model: VideosThumbnailsModel,\n                as: 'thumbnails',\n              },\n            ],\n          },\n          {\n            association: 'trailers',\n          },\n          {\n            association: 'banners',\n          },\n        ],\n      });\n      if (movies) {\n        return movies;\n      } else {\n        throw new Error('Error getting movies');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  // get movie by id\n  public static async getMovieById(id: string) {\n    try {\n      const movie = await MoviesModel.findOne({\n        where: {\n          id,\n        },\n        include: [\n          {\n            model: MoviesBannerModel,\n            as: 'banners',\n          },\n          {\n            model: VideosModel,\n            as: 'videos',\n            include: [\n              {\n                model: VideosSourceModel,\n                as: 'sources',\n              },\n              {\n                model: VideosThumbnailsModel,\n                as: 'thumbnails',\n              },\n            ],\n          },\n          {\n            association: 'trailers',\n            as: 'trailers',\n          },\n        ],\n      });\n      if (movie) {\n        return movie;\n      } else {\n        throw new Error('Error getting movie');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  // update movie\n  public static async updateMovie(id: string, movie: any) {\n    try {\n      const updatedMovie = await MoviesModel.update(movie, {\n        where: {\n          id,\n        },\n      });\n      if (updatedMovie) {\n        //  return updated data\n        const movie = await MoviesModel.findOne({\n          where: {\n            id,\n          },\n        });\n        return movie;\n      } else {\n        throw new Error('Error updating movie');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  // delete movie\n  public static async deleteMovie(id: string) {\n    try {\n      const deletedMovie = await MoviesModel.destroy({\n        where: {\n          id,\n        },\n      });\n      if (deletedMovie) {\n        return 'Movie deleted';\n      } else {\n        throw new Error('Error deleting movie');\n      }\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n}\n"],"names":["MoviesService","addMovie","movie","movieExists","MoviesModel","findOne","where","title","Error","newMovie","create","id","nanoid","error","console","log","getAllMovies","movies","findAll","order","include","model","MoviesBannerModel","as","VideosModel","VideosSourceModel","VideosThumbnailsModel","association","getMovieById","updateMovie","updatedMovie","update","deleteMovie","deletedMovie","destroy"],"mappings":"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"}