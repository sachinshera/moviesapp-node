{"version":3,"sources":["../../../src/services/search/search.service.ts"],"sourcesContent":["import { MoviesModel } from '@/models/movies/movies.model';\r\nimport { SeriesModel } from '@/models/series/series.model';\r\nimport { Op, Sequelize } from 'sequelize';\r\n\r\nexport default class SearchService {\r\n  static async search(query: string) {\r\n    if (query.length < 3) {\r\n      // search for all movies and series\r\n      const movies = await MoviesModel.findAll({\r\n        include: [\r\n          {\r\n            association: 'banners',\r\n            as: 'banners',\r\n          },\r\n          {\r\n            association: 'videos',\r\n            as: 'videos',\r\n            include: [\r\n              {\r\n                association: 'sources',\r\n                as: 'sources',\r\n              },\r\n              {\r\n                association: 'thumbnails',\r\n                as: 'thumbnails',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'trailers',\r\n            as: 'trailers',\r\n          },\r\n        ],\r\n      });\r\n\r\n      const series = await SeriesModel.findAll({\r\n        include: [\r\n          {\r\n            association: 'seasons',\r\n            include: [\r\n              {\r\n                association: 'episodes',\r\n                include: [\r\n                  {\r\n                    association: 'episodesDetails',\r\n                    include: [\r\n                      {\r\n                        association: 'sources',\r\n                      },\r\n                      {\r\n                        association: 'thumbnails',\r\n                      },\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'trailers',\r\n          },\r\n        ],\r\n      });\r\n\r\n      // set type to movies and series\r\n\r\n      movies.forEach(movie => {\r\n        movie.setDataValue('type', 'movie');\r\n      });\r\n\r\n      series.forEach(serie => {\r\n        serie.setDataValue('type', 'series');\r\n      });\r\n\r\n      return [...movies, ...series];\r\n    }\r\n    try {\r\n      const movies = await MoviesModel.findAll({\r\n        where: {\r\n          [Op.or]: [\r\n            {\r\n              title: {\r\n                [Op.match]: query,\r\n              },\r\n            },\r\n            {\r\n              description: {\r\n                [Op.match]: query,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        include: [\r\n          {\r\n            association: 'banners',\r\n            as: 'banners',\r\n          },\r\n          {\r\n            association: 'videos',\r\n            as: 'videos',\r\n            include: [\r\n              {\r\n                association: 'sources',\r\n                as: 'sources',\r\n              },\r\n              {\r\n                association: 'thumbnails',\r\n                as: 'thumbnails',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'trailers',\r\n            as: 'trailers',\r\n          },\r\n        ],\r\n      });\r\n\r\n      const series = await SeriesModel.findAll({\r\n        where: {\r\n          [Op.or]: [\r\n            {\r\n              name: {\r\n                [Op.match]: query,\r\n              },\r\n            },\r\n            {\r\n              description: {\r\n                [Op.match]: query,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        include: [\r\n          {\r\n            association: 'seasons',\r\n            include: [\r\n              {\r\n                association: 'episodes',\r\n                include: [\r\n                  {\r\n                    association: 'episodesDetails',\r\n                    include: [\r\n                      {\r\n                        association: 'sources',\r\n                      },\r\n                      {\r\n                        association: 'thumbnails',\r\n                      },\r\n                    ],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            association: 'trailers',\r\n          },\r\n        ],\r\n      });\r\n\r\n      // set type to movies and series\r\n\r\n      movies.forEach(movie => {\r\n        movie.setDataValue('type', 'movie');\r\n      });\r\n\r\n      series.forEach(serie => {\r\n        serie.setDataValue('type', 'series');\r\n      });\r\n\r\n      return [...movies, ...series];\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n}\r\n"],"names":["SearchService","search","query","length","movies","MoviesModel","findAll","include","association","as","series","SeriesModel","forEach","movie","setDataValue","serie","where","Op","or","title","match","description","name","e","console","log"],"mappings":"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"}