{"version":3,"sources":["../../../src/services/series/series.season.service.ts"],"sourcesContent":["import { SeriesModel } from '@/models/series/series.model';\nimport { SeriesSeasonsModel } from '@/models/series/series.seasons.model';\nimport { nanoid } from 'nanoid';\n\nexport class SeriesSeasonService {\n  // add new season\n  public static async addSeason(seriesId: string, season: SeriesSeasonsModel) {\n    try {\n      // check if series exists\n      const seriesExists = await SeriesModel.findOne({\n        where: {\n          id: seriesId,\n        },\n      });\n      if (!seriesExists) {\n        throw new Error('Series does not exist');\n      }\n\n      // check if season already exists\n      const seasonExists = await SeriesSeasonsModel.findOne({\n        where: {\n          season: season.season,\n        },\n      });\n      if (seasonExists) {\n        throw new Error('Season already exists');\n      }\n      const id = nanoid();\n      const newSeason = SeriesSeasonsModel.create({\n        id: id,\n        series_id: seriesId,\n        ...season,\n      });\n\n      return newSeason;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // get all seasons\n\n  public static async getAllSeasons(seriesId: string) {\n    const seasons = await SeriesSeasonsModel.findAll({\n      where: {\n        series_id: seriesId,\n      },\n    });\n    return seasons;\n  }\n\n  //   get season by id\n  public static async getSeasonById(seriesId: string, seasonId: string) {\n    const season = await SeriesSeasonsModel.findOne({\n      where: {\n        series_id: seriesId,\n        id: seasonId,\n      },\n    });\n    return season;\n  }\n\n  //   update season\n\n  public static async updateSeason(seriesId: string, seasonId: string, season: SeriesSeasonsModel) {\n    const seasonExists = await SeriesSeasonsModel.findOne({\n      where: {\n        series_id: seriesId,\n        id: seasonId,\n      },\n    });\n    if (!seasonExists) {\n      throw new Error('Season does not exist');\n    }\n    const updatedSeason = await SeriesSeasonsModel.update(\n      {\n        ...season,\n      },\n      {\n        where: {\n          series_id: seriesId,\n          id: seasonId,\n        },\n      },\n    );\n\n    // return updated season\n    const updatedSeasonData = await SeriesSeasonsModel.findOne({\n      where: {\n        series_id: seriesId,\n        id: seasonId,\n      },\n    });\n\n    return updatedSeasonData;\n  }\n\n  //   //   delete season\n\n  public static async deleteSeason(seriesId: string, seasonId: string) {\n    const seasonExists = await SeriesSeasonsModel.findOne({\n      where: {\n        series_id: seriesId,\n        id: seasonId,\n      },\n    });\n    if (!seasonExists) {\n      throw new Error('Season does not exist');\n    }\n    const deletedSeason = await SeriesSeasonsModel.destroy({\n      where: {\n        series_id: seriesId,\n        id: seasonId,\n      },\n    });\n    return 'Season deleted successfully';\n  }\n}\n"],"names":["SeriesSeasonService","addSeason","seriesId","season","seriesExists","SeriesModel","findOne","where","id","Error","seasonExists","SeriesSeasonsModel","nanoid","newSeason","create","series_id","err","getAllSeasons","seasons","findAll","getSeasonById","seasonId","updateSeason","updatedSeason","update","updatedSeasonData","deleteSeason","deletedSeason","destroy"],"mappings":";;;;+BAIaA;;;eAAAA;;;6BAJe;oCACO;wBACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhB,IAAA,AAAMA,sBAAN,MAAMA;IAEX,aAAoBC,UAAUC,QAAgB,EAAEC,MAA0B,EAAE;QAC1E,IAAI;YAEF,MAAMC,eAAe,MAAMC,wBAAW,CAACC,OAAO,CAAC;gBAC7CC,OAAO;oBACLC,IAAIN;gBACN;YACF;YACA,IAAI,CAACE,cAAc;gBACjB,MAAM,IAAIK,MAAM,yBAAyB;YAC3C,CAAC;YAGD,MAAMC,eAAe,MAAMC,sCAAkB,CAACL,OAAO,CAAC;gBACpDC,OAAO;oBACLJ,QAAQA,OAAOA,MAAM;gBACvB;YACF;YACA,IAAIO,cAAc;gBAChB,MAAM,IAAID,MAAM,yBAAyB;YAC3C,CAAC;YACD,MAAMD,KAAKI,IAAAA,cAAM;YACjB,MAAMC,YAAYF,sCAAkB,CAACG,MAAM,CAAC;gBAC1CN,IAAIA;gBACJO,WAAWb;eACRC;YAGL,OAAOU;QACT,EAAE,OAAOG,KAAK;YACZ,MAAMA,IAAI;QACZ;IACF;IAIA,aAAoBC,cAAcf,QAAgB,EAAE;QAClD,MAAMgB,UAAU,MAAMP,sCAAkB,CAACQ,OAAO,CAAC;YAC/CZ,OAAO;gBACLQ,WAAWb;YACb;QACF;QACA,OAAOgB;IACT;IAGA,aAAoBE,cAAclB,QAAgB,EAAEmB,QAAgB,EAAE;QACpE,MAAMlB,SAAS,MAAMQ,sCAAkB,CAACL,OAAO,CAAC;YAC9CC,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QACA,OAAOlB;IACT;IAIA,aAAoBmB,aAAapB,QAAgB,EAAEmB,QAAgB,EAAElB,MAA0B,EAAE;QAC/F,MAAMO,eAAe,MAAMC,sCAAkB,CAACL,OAAO,CAAC;YACpDC,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QACA,IAAI,CAACX,cAAc;YACjB,MAAM,IAAID,MAAM,yBAAyB;QAC3C,CAAC;QACD,MAAMc,gBAAgB,MAAMZ,sCAAkB,CAACa,MAAM,CACnD,mBACKrB,SAEL;YACEI,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QAIF,MAAMI,oBAAoB,MAAMd,sCAAkB,CAACL,OAAO,CAAC;YACzDC,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QAEA,OAAOI;IACT;IAIA,aAAoBC,aAAaxB,QAAgB,EAAEmB,QAAgB,EAAE;QACnE,MAAMX,eAAe,MAAMC,sCAAkB,CAACL,OAAO,CAAC;YACpDC,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QACA,IAAI,CAACX,cAAc;YACjB,MAAM,IAAID,MAAM,yBAAyB;QAC3C,CAAC;QACD,MAAMkB,gBAAgB,MAAMhB,sCAAkB,CAACiB,OAAO,CAAC;YACrDrB,OAAO;gBACLQ,WAAWb;gBACXM,IAAIa;YACN;QACF;QACA,OAAO;IACT;AACF"}