{"version":3,"sources":["../../../src/services/series/series.season.video.service.ts"],"sourcesContent":["import { SeriesSeasonVideosModel } from '@/models/series/series.season.videos.model';\nimport { SeriesSeasonsModel } from '@/models/series/series.seasons.model';\nimport { nanoid } from 'nanoid';\n\nexport default class SeriesSeasonVideoService {\n  // add new video to season\n  public static async addVideoToSeason(seriesId: string, seasonId: string, video: SeriesSeasonVideosModel) {\n    try {\n      // check if season exists\n      const season = await SeriesSeasonsModel.findOne({\n        where: {\n          id: seasonId,\n          series_id: seriesId,\n        },\n      });\n\n      if (!season) {\n        throw new Error('Season not found');\n      }\n\n      // check if video already exists\n\n      const videoExists = await SeriesSeasonVideosModel.findOne({\n        where: {\n          season_id: seasonId,\n          video: video.video,\n          series_id: seriesId,\n        },\n      });\n\n      if (videoExists) {\n        throw new Error('Video already exists');\n      }\n\n      // add video to season\n\n      const addVideo = await SeriesSeasonVideosModel.create({\n        id: nanoid(),\n        series_id: seriesId,\n        season_id: seasonId,\n        ...video,\n      });\n\n      return addVideo;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  //   get all videos in season\n  public static async getAllVideosInSeason(seriesId: string, seasonId: string) {\n    // check if season exists\n    const season = await SeriesSeasonsModel.findOne({\n      where: {\n        id: seasonId,\n        series_id: seriesId,\n      },\n    });\n\n    if (!season) {\n      throw new Error('Season not found');\n    }\n\n    // get all videos in season\n    const videos = await SeriesSeasonVideosModel.findAll({\n      where: {\n        series_id: seriesId,\n        season_id: seasonId,\n      },\n    });\n\n    return videos;\n  }\n\n  // update video in season\n  public static async updateVideoInSeason(seriesId: string, seasonId: string, videoId: string, video: SeriesSeasonVideosModel) {\n    try {\n      // check if season exists\n      const season = await SeriesSeasonsModel.findOne({\n        where: {\n          id: seasonId,\n          series_id: seriesId,\n        },\n      });\n\n      if (!season) {\n        throw new Error('Season not found');\n      }\n\n      // check if video exists\n      const videoExists = await SeriesSeasonVideosModel.findOne({\n        where: {\n          id: videoId,\n          series_id: seriesId,\n          season_id: seasonId,\n        },\n      });\n\n      if (!videoExists) {\n        throw new Error('Video not found');\n      }\n\n      // update video\n      const updateVideo = await SeriesSeasonVideosModel.update(\n        {\n          ...video,\n        },\n        {\n          where: {\n            id: videoId,\n            series_id: seriesId,\n            season_id: seasonId,\n          },\n        },\n      );\n\n      //   return updated video\n      const updatedVideo = await SeriesSeasonVideosModel.findOne({\n        where: {\n          id: videoId,\n          series_id: seriesId,\n          season_id: seasonId,\n        },\n      });\n\n      return updatedVideo;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  //   // delete video from season\n  public static async deleteVideoFromSeason(seriesId: string, seasonId: string, videoId: string) {\n    try {\n      // check if season exists\n      const season = await SeriesSeasonsModel.findOne({\n        where: {\n          id: seasonId,\n          series_id: seriesId,\n        },\n      });\n\n      if (!season) {\n        throw new Error('Season not found');\n      }\n\n      // check if video exists\n      const videoExists = await SeriesSeasonVideosModel.findOne({\n        where: {\n          id: videoId,\n          series_id: seriesId,\n          season_id: seasonId,\n        },\n      });\n\n      if (!videoExists) {\n        throw new Error('Video not found');\n      }\n\n      // delete video\n      const deleteVideo = await SeriesSeasonVideosModel.destroy({\n        where: {\n          id: videoId,\n          series_id: seriesId,\n          season_id: seasonId,\n        },\n      });\n\n      return 'Video deleted';\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n"],"names":["SeriesSeasonVideoService","addVideoToSeason","seriesId","seasonId","video","season","SeriesSeasonsModel","findOne","where","id","series_id","Error","videoExists","SeriesSeasonVideosModel","season_id","addVideo","create","nanoid","err","getAllVideosInSeason","videos","findAll","updateVideoInSeason","videoId","updateVideo","update","updatedVideo","deleteVideoFromSeason","deleteVideo","destroy"],"mappings":"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"}