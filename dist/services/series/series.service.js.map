{"version":3,"sources":["../../../src/services/series/series.service.ts"],"sourcesContent":["import { SeriesModel } from '@/models/series/series.model';\nimport { nanoid } from 'nanoid';\nimport { Op } from 'sequelize';\n\nexport class SeriesService {\n  public static async createSeries(series: SeriesModel) {\n    // check if series already exists\n    const seriesExists = await SeriesModel.findOne({\n      where: {\n        name: series.name,\n      },\n    });\n    if (seriesExists) {\n      throw new Error('Series already exists');\n    }\n    const id = nanoid();\n    const newSeries = new SeriesModel({\n      id,\n      ...series,\n    });\n    await newSeries.save();\n    return newSeries;\n  }\n\n  //   get all series\n  public static async getAllSeries(limit: number, offset: number, q: string, date: string) {\n    const series = await SeriesModel.findAll({\n      limit,\n      offset,\n      where: {\n        name: {\n          [Op.like]: `%${q}%`,\n        },\n      },\n      include: [\n        {\n          association: 'seasons',\n          include: [\n            {\n              association: 'episodes',\n              include: [\n                {\n                  association: 'episodesDetails',\n                  include: [\n                    {\n                      association: 'sources',\n                    },\n                    {\n                      association: 'thumbnails',\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          association: 'trailers',\n        },\n        {\n          association: 'banners',\n        },\n      ],\n    });\n    return series;\n  }\n\n  //   get series by id\n  public static async getSeriesById(id: string) {\n    const series = await SeriesModel.findOne({\n      where: {\n        id,\n      },\n      include: [\n        {\n          association: 'seasons',\n          include: [\n            {\n              association: 'episodes',\n              include: [\n                {\n                  association: 'episodesDetails',\n                  include: [\n                    {\n                      association: 'sources',\n                    },\n                    {\n                      association: 'thumbnails',\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n        },\n        {\n          association: 'trailers',\n        },\n        {\n          association: 'banners',\n        },\n      ],\n    });\n    return series;\n  }\n\n  //   //   update series\n\n  public static async updateSeries(id: string, series: SeriesModel) {\n    const updatedSeries = await SeriesModel.update(series, {\n      where: {\n        id,\n      },\n    });\n    // return updatedSeries;\n\n    const seriesById = await SeriesModel.findOne({\n      where: {\n        id,\n      },\n    });\n    return seriesById;\n  }\n\n  //   //   delete series\n\n  public static async deleteSeries(id: string) {\n    const deletedSeries = await SeriesModel.destroy({\n      where: {\n        id,\n      },\n    });\n    return 'Series deleted successfully';\n  }\n}\n"],"names":["SeriesService","createSeries","series","seriesExists","SeriesModel","findOne","where","name","Error","id","nanoid","newSeries","save","getAllSeries","limit","offset","q","date","findAll","Op","like","include","association","getSeriesById","updateSeries","updatedSeries","update","seriesById","deleteSeries","deletedSeries","destroy"],"mappings":";;;;+BAIaA;;;eAAAA;;;6BAJe;wBACL;2BACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,IAAA,AAAMA,gBAAN,MAAMA;IACX,aAAoBC,aAAaC,MAAmB,EAAE;QAEpD,MAAMC,eAAe,MAAMC,wBAAW,CAACC,OAAO,CAAC;YAC7CC,OAAO;gBACLC,MAAML,OAAOK,IAAI;YACnB;QACF;QACA,IAAIJ,cAAc;YAChB,MAAM,IAAIK,MAAM,yBAAyB;QAC3C,CAAC;QACD,MAAMC,KAAKC,IAAAA,cAAM;QACjB,MAAMC,YAAY,IAAIP,wBAAW,CAAC;YAChCK;WACGP;QAEL,MAAMS,UAAUC,IAAI;QACpB,OAAOD;IACT;IAGA,aAAoBE,aAAaC,KAAa,EAAEC,MAAc,EAAEC,CAAS,EAAEC,IAAY,EAAE;QACvF,MAAMf,SAAS,MAAME,wBAAW,CAACc,OAAO,CAAC;YACvCJ;YACAC;YACAT,OAAO;gBACLC,MAAM;oBACJ,CAACY,aAAE,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAEJ,EAAE,CAAC,CAAC;gBACrB;YACF;YACAK,SAAS;gBACP;oBACEC,aAAa;oBACbD,SAAS;wBACP;4BACEC,aAAa;4BACbD,SAAS;gCACP;oCACEC,aAAa;oCACbD,SAAS;wCACP;4CACEC,aAAa;wCACf;wCACA;4CACEA,aAAa;wCACf;qCACD;gCACH;6BACD;wBACH;qBACD;gBACH;gBACA;oBACEA,aAAa;gBACf;gBACA;oBACEA,aAAa;gBACf;aACD;QACH;QACA,OAAOpB;IACT;IAGA,aAAoBqB,cAAcd,EAAU,EAAE;QAC5C,MAAMP,SAAS,MAAME,wBAAW,CAACC,OAAO,CAAC;YACvCC,OAAO;gBACLG;YACF;YACAY,SAAS;gBACP;oBACEC,aAAa;oBACbD,SAAS;wBACP;4BACEC,aAAa;4BACbD,SAAS;gCACP;oCACEC,aAAa;oCACbD,SAAS;wCACP;4CACEC,aAAa;wCACf;wCACA;4CACEA,aAAa;wCACf;qCACD;gCACH;6BACD;wBACH;qBACD;gBACH;gBACA;oBACEA,aAAa;gBACf;gBACA;oBACEA,aAAa;gBACf;aACD;QACH;QACA,OAAOpB;IACT;IAIA,aAAoBsB,aAAaf,EAAU,EAAEP,MAAmB,EAAE;QAChE,MAAMuB,gBAAgB,MAAMrB,wBAAW,CAACsB,MAAM,CAACxB,QAAQ;YACrDI,OAAO;gBACLG;YACF;QACF;QAGA,MAAMkB,aAAa,MAAMvB,wBAAW,CAACC,OAAO,CAAC;YAC3CC,OAAO;gBACLG;YACF;QACF;QACA,OAAOkB;IACT;IAIA,aAAoBC,aAAanB,EAAU,EAAE;QAC3C,MAAMoB,gBAAgB,MAAMzB,wBAAW,CAAC0B,OAAO,CAAC;YAC9CxB,OAAO;gBACLG;YACF;QACF;QACA,OAAO;IACT;AACF"}